package eecs448_lab7;

import static org.junit.Assert.*;

import org.junit.Test;

public class MatrixTest {

	@Test
	public void testDeterminant() {
		//fail("Not yet implemented");
		
		//initialize new matrix
		Matrix m;
		double[][] inputs = new double[3][3];
		
		//insert values into new matrix
		inputs[0][0] = 5;
		inputs[0][1] = 4;
		inputs[0][2] = 3;
		inputs[1][0] = 6;
		inputs[1][1] = 9;
		inputs[1][2] = 1;
		inputs[2][0] = 2;
		inputs[2][1] = 5;
		inputs[2][2] = 3;
		
		m = new Matrix(3);
		
		m.setData(inputs);

		
		//test if the determinant is 82.0
		
		assertEquals(82.0, m.determinant(), 0.001);
		
	}

	@Test
	public void testInverse() {
		//fail("Not yet implemented");
		
		//initialize new matrix
		Matrix m;
		double[][] inputs = new double[3][3];
		double[][] soln = new double[3][3];
		
		//insert values into new matrix
		inputs[0][0] = 1;
		inputs[0][1] = 2;
		inputs[0][2] = 3;
		inputs[1][0] = 0;
		inputs[1][1] = 1;
		inputs[1][2] = 4;
		inputs[2][0] = 5;
		inputs[2][1] = 6;
		inputs[2][2] = 0;
		
		//correct solution calculated from online
		soln[0][0] = -24;
		soln[0][1] = 18;
		soln[0][2] = 5;
		soln[1][0] = 20;
		soln[1][1] = -15;
		soln[1][2] = -4;
		soln[2][0] = -5;
		soln[2][1] = 4;
		soln[2][2] = 1;	
		
		m = new Matrix(3);
		m.setData(inputs);
		
		//make an inverse matrix
		Matrix inv = m.inverse();

		
		//loop through both arrays (one of which is in a matrix object) and see if all values are equal
		for(int i = 0; i < 3; i++){
				assertArrayEquals(soln[i], inv.getData()[i], 0.001);
		}
	}

	@Test
	public void testSubMatrix() {
		Matrix m;
		Matrix m2;
		int n = 3;
		double[][] inputs = new double[n][n];
		double[][] soln = new double[n-1][n-1];
		
		//insert values into new matrix
		inputs[0][0] = 1;
		inputs[0][1] = 2;
		inputs[0][2] = 3;
		inputs[1][0] = 0;
		inputs[1][1] = 1;
		inputs[1][2] = 4;
		inputs[2][0] = 5;
		inputs[2][1] = 6;
		inputs[2][2] = 0;
		
		//2d array if row 1, column 2 are deleted to use as verification of method
		soln[0][0] = 1;
		soln[0][1] = 2;
		soln[1][0] = 5;
		soln[1][1] = 6;
		
		m = new Matrix(n);
		
		m.setData(inputs);
		//make submatrix deleting row 1, column 2
		m2 = m.subMatrix(1, 2);
		
		for(int i = 0; i < n-1; i++){
			for(int j = 0; j < n-1; j++){
				assertTrue(soln[i][j] == m2.getData()[i][j]);
			}
		}
		
		
	}
	
	
	@Test
	public void getData(){
		//initialize new matrix
		Matrix m;
		double[][] inputs = new double[3][3];
		double[][] soln = new double[3][3];
		
		//insert values into new matrix
		inputs[0][0] = 1;
		inputs[0][1] = 2;
		inputs[0][2] = 3;
		inputs[1][0] = 0;
		inputs[1][1] = 1;
		inputs[1][2] = 4;
		inputs[2][0] = 5;
		inputs[2][1] = 6;
		inputs[2][2] = 0;
		
		soln[0][0] = 1;
		soln[0][1] = 2;
		soln[0][2] = 3;
		soln[1][0] = 0;
		soln[1][1] = 1;
		soln[1][2] = 4;
		soln[2][0] = 5;
		soln[2][1] = 6;
		soln[2][2] = 0;
		
		m = new Matrix(3);
		m.setData(inputs);
		
		for(int i = 0; i < 3; i++){
			for(int j = 0; j < 3; j++){
				assertTrue(soln[i][j] == m.getData()[i][j]);
			}
		}
	}
}



